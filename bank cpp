
#include "Bank.h"
#include <iostream>
#include <cstdlib>
#include <string>
#include<fstream>
#include <string>
#include "aes.h"
#include "modes.h"
#include "filters.h"
#include "files.h"
#include "osrng.h"
#include "hex.h"
#include <sstream>
#include "cryptlib.h"
#include "rijndael.h"
#include <sstream>
#include <stdexcept>

using namespace CryptoPP;
using namespace std;


Bank::Account::Account()
{
}

Bank::Account::Account(const string& ownerName, unsigned short accNumber, double accBalance, int accPin)

    : accounOwnerName(ownerName), accountNumber(accNumber), balance(accBalance), pin(accPin), next(nullptr)
    {
    }


int Bank::Account::getPin()
{
    return pin;
}


void Bank::Account::setPin(int accPin)
{
    pin = accPin;

}

double Bank::Account::getBalance()
{
    return balance;
}

Bank::Bank()
{
    head = NULL;

}

//return number of accounts
    //Size of the Linked List
unsigned short Bank::AccountsNum()
{
    return count;
}

void Bank::addAccount(string accounOwnerName, double balance, int pin)
{

    Account* newAccount = new Account();
    AccountPointer ptr = head; //****enhance here 3 in read me

    //generate a random acc number
    unsigned short accnum = rand() % (65535 - 10000 - 1) + 10000;

    // Generate a new random number (to avoid repetition)
    while (AccNumSearch(accnum))
    {
        accnum = rand() % (65535 - 10000 - 1) + 10000;
    }

    newAccount->accountNumber = accnum;
    newAccount->accounOwnerName = accounOwnerName;
    newAccount->balance = balance;
    newAccount->setPin(pin);
    newAccount->next = NULL;

    if (head == NULL)
    {
        head = newAccount;
        cout << "First account created successfully!" << endl;
        cout << "Account number: " << accnum << endl;
        return;
    }

// Iteration to put the acc at the end of list
    while (ptr->next != NULL)
    {
        ptr = ptr->next;
    }
    ptr->next = newAccount;

    count++; // Incrementing number of accounts: our ll size
    cout << "Account created successfully!" << endl;
    cout << "Account number: " << accnum << endl;

}

/*Search for account number not to be repeated
Used in add acc to avoid repition*/
bool Bank::AccNumSearch(unsigned short accountNumber)
{

    AccountPointer current = head;
    while (current != nullptr) {
        if (current->accountNumber == accountNumber)
            return true;
        current = current->next;
    }
    return false;
}

// checking if data entered is available
bool Bank::loginVerify(Bank* bank, string accounOwnerName, int pin)
{
    AccountPointer currentPtr = bank->head;
    while (currentPtr != nullptr) {
        if (currentPtr->accounOwnerName == accounOwnerName) {
            if (currentPtr->getPin() == pin) {
                return true;
            }
            else {
                return false;
            }
        }
        currentPtr = currentPtr->next;
    }
    return false;
}

void Bank::deleteAccount(int accountNum)
{

    AccountPointer current = head;
    AccountPointer previous = NULL;
    //Another Approach
   /*   if (current != NULL && current->accountNumber == accountNum) {
          head = current->next;
          delete current;
          return;

      }
      while (current != NULL && current->accountNumber != accountNum) {
          previous = current;
          current = current->next;
      }
      if (current == NULL) return;

      previous->next = current->next;
      delete current;
      return;*/

    while (current != NULL) {
        if (current->accountNumber == accountNum) {
            if (previous == NULL) {
                head = current->next;
            }
            else {
                previous->next = current->next;
            }
            delete current;
            return;
        }
        previous = current;
        current = current->next;
    }
    count--;
    return;
}

void Bank::deposit(int accountNum, double amount)
{

    AccountPointer current = head;
    while (current != NULL) {
        if (current->accountNumber == accountNum) {
            current->balance += amount;
            return;
        }
        current = current->next;
    }
}

void Bank::withdraw(int accountNum, double amount)
{

    AccountPointer current = head;
    while (current != NULL) {
        if (current->accountNumber == accountNum) {
            if (current->balance >= amount) {
                current->balance -= amount;
            }
            else {
                cout << "Insufficient balance" << endl;
            }
            return;
        }
        current = current->next;
    }
}

unsigned short Bank::findAccount(const string& username, int pin)
{

    AccountPointer current = head;
    while (current != nullptr)
    {
        if (current->accounOwnerName == username && current->getPin() == pin) {
            return current->accountNumber;
        }
        current = current->next;
    }
    return 0;  // Return 0 if account is not found (assuming 0 is not a valid account number)

}

void Bank::BalanceDisplay(const string& account_holder_name)
{

    AccountPointer current = head;

    while (current != nullptr)
    {
        if (current->accounOwnerName == account_holder_name)
        {
            cout << "Account Holder: " << current->accounOwnerName << endl;
            cout << "Account Number: " << current->accountNumber << endl;
            cout << "Balance: " << current->balance << endl;
            return;  // Exit the function once the account is found and displayed
        }

        current = current->next;
    }

    cout << "Account not found" << endl;
}//tested


// Transfering money from an acc to another
void Bank::TransferMoney(unsigned short AccountNum1, unsigned short AccountNum, double Amount)
{
    AccountPointer ptr = head, ptr1 = head;
    double balance1;
    while (ptr1 != NULL) {
        if (ptr1->accountNumber == AccountNum1) {
            balance1 = ptr1->balance;
            break;
        }
        ptr1 = ptr1->next;
    }


    while (ptr != NULL)
    {
        if (ptr->accountNumber == AccountNum)
        {
            if (Amount <= balance1)
            {
                withdraw(AccountNum1, Amount);
                deposit(AccountNum, Amount);
                //ptr->accountNumber += Amount;
                //acc->accountNumber -= Amount;
                cout << "Money Transfered Successfully" << endl;
                return;
            }
            else if (Amount > balance1) {
                cout << "No enough Money to Transfer" << endl;
            }
        }

        ptr = ptr->next;
    }

    return;
}void Bank::EncryptAndWriteToFile(AutoSeededRandomPool& prng)
{
    try
    {
        // Generate key and IV
        SecByteBlock key(AES::DEFAULT_KEYLENGTH);
        prng.GenerateBlock(key, key.size());

        SecByteBlock iv(AES::BLOCKSIZE);
        prng.GenerateBlock(iv, iv.size());

        // Use the same key and iv for encryption and decryption
        CBC_Mode<AES>::Encryption encryptor(key, key.size(), iv);

        ofstream bankFile("BankEncrypted.txt", ios::binary);
        if (!bankFile.is_open())
        {
            cerr << "Error opening file for writing." << endl;
            return;
        }

        AccountPointer ptr = head;

        while (ptr != NULL)
        {
            // Serialize the data to a string
            string plaintext = ptr->accounOwnerName + " " + to_string(ptr->accountNumber) + " " +
                to_string(ptr->balance) + " " + to_string(ptr->getPin());

            // Encrypt the plaintext
            StringSource s(plaintext, true,
                new StreamTransformationFilter(encryptor,
                    new FileSink(bankFile)
                )
            );

            ptr = ptr->next;
        }

        bankFile.close();
    }
    catch (const std::exception& ex)
    {
        cerr << "Exception during file writing: " << ex.what() << endl;
        // Handle the exception as needed
    }
}



void Bank::DecryptFromFile(AutoSeededRandomPool& prng)
{
    try
    {
        // Generate key and IV
        SecByteBlock key(AES::DEFAULT_KEYLENGTH);
        prng.GenerateBlock(key, key.size());

        SecByteBlock iv(AES::BLOCKSIZE);
        prng.GenerateBlock(iv, iv.size());

        // Use the same key and iv for encryption and decryption
        CBC_Mode<AES>::Decryption decryptor(key, key.size(), iv);

        ifstream bankFile("BankEncrypted.txt", ios::binary);
        if (!bankFile.is_open())
        {
            throw runtime_error("Error opening file for reading.");
        }

        string ciphertext;
        while (getline(bankFile, ciphertext))
        {
            // Decrypt the ciphertext
            string plaintext;
            StringSource s(ciphertext, true,
                new StreamTransformationFilter(decryptor,
                    new StringSink(plaintext)
                )
            );

            // Deserialize the data from the plaintext
            stringstream ss(plaintext);
            string ownerName;
            int accountNumber;
            double balance;
            int pin;
            ss >> ownerName >> accountNumber >> balance >> pin;

            // Store the deserialized data in a linked list
            AccountPointer newPtr = new Account(ownerName, accountNumber, balance, pin);
            newPtr->next = head;
            head = newPtr;
        }

        bankFile.close();
    }
    catch (const exception& ex)
    {
        cerr << "Exception during file reading: " << ex.what() << endl;
        // Handle the exception as needed
    }
}

